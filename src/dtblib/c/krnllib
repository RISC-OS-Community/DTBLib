/*
 * DTBLib: Device Tree Blob Parsing Library
 *
 * Copyright (c) 2023 by Paolo Fabio Zaino, all rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Limitations:
 * - Redistribution and use of this software in source and binary
 *   forms, with or without modification, are permitted provided that
 *   the following conditions are met:
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions, and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions, and the following
 *     disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *   - Neither the name of Paolo Fabio Zaino, nor the names
 *     of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *   - Users of this software are prohibited from misrepresenting
 *     themselves as the authors or original contributors of this
 *     software.
 *
 * This software is provided by the copyright holders and contributors
 * "as is" and any express or implied warranties, including, but not
 * limited to, the implied warranties of merchantability and fitness
 * for a particular purpose are disclaimed. In no event shall the
 * copyright owner or contributors be liable for any direct,
 * indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or
 * services; loss of use, data, or profits; or business interruption)
 * however caused and on any theory of liability, whether in
 * contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software,
 * even if advised of the possibility of such damage.
 *
 * For more details and the full text of the license, refer to the
 * Apache 2.0 License file included with this project or available at
 * the above URL.
 */

#include "krnllib.h"

uint32_t krnl_bswap32(uint32_t val) {
    return ((val & 0x000000FFU) << 24) |
           ((val & 0x0000FF00U) <<  8) |
           ((val & 0x00FF0000U) >>  8) |
           ((val & 0xFF000000U) >> 24);
}

uint64_t krnl_bswap64(uint64_t val) {
    return ((val & 0x00000000000000FFULL) << 56) |
           ((val & 0x000000000000FF00ULL) << 40) |
           ((val & 0x0000000000FF0000ULL) << 24) |
           ((val & 0x00000000FF000000ULL) <<  8) |
           ((val & 0x000000FF00000000ULL) >>  8) |
           ((val & 0x0000FF0000000000ULL) >> 24) |
           ((val & 0x00FF000000000000ULL) >> 40) |
           ((val & 0xFF00000000000000ULL) >> 56);
}

uint32_t read_uint32(const char* data, int offset) {
    uint32_t val;
    krnl_memcpy(&val, data + offset, sizeof(uint32_t));
    return krnl_bswap32(val);
}

uint64_t read_uint64(const char* data, int offset) {
    uint64_t val;
    krnl_memcpy(&val, data + offset, sizeof(uint64_t));
    return krnl_bswap64(val);
}

// Memory allocation functions

void* krnl_memcpy(void* dest, const void* src, size_t n) {
    #ifdef DEBUG_MEMORY
    return memcpy(dest, src, n);
    #else
    char* d = (char*)dest;
    const char* s = (const char*)src;

    for (size_t i = 0; i < n; i++) {
        d[i] = s[i];
    }
    return dest;
    #endif
}

void* krnl_malloc(size_t size) {
    #ifdef DEBUG_MEMORY
    return malloc(size);
    #else
    // Add your custom implementation here
    (void)size;
    return NULL;
    #endif
}

void* krnl_calloc(size_t num, size_t size) {
    #ifdef DEBUG_MEMORY
    return calloc(num, size);
    #else
    // Add your custom implementation here
    (void)num;
    (void)size;
    return NULL;
    #endif
}

void* krnl_realloc(void* ptr, size_t size) {
    #ifdef DEBUG_MEMORY
    return realloc(ptr, size);
    #else
    // Add your custom implementation here
    (void)ptr;
    (void)size;
    return NULL;
    #endif
}

void krnl_free(void* ptr) {
    #ifdef DEBUG_MEMORY
    free(ptr);
    #else
    // Add your custom implementation here
    (void)ptr;
    #endif
}

