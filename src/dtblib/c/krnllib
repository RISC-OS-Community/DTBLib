/*
*/

#include "krnllib.h"

uint32_t krnl_bswap32(uint32_t val) {
    return ((val & 0x000000FFU) << 24) |
           ((val & 0x0000FF00U) <<  8) |
           ((val & 0x00FF0000U) >>  8) |
           ((val & 0xFF000000U) >> 24);
}

uint64_t krnl_bswap64(uint64_t val) {
    return ((val & 0x00000000000000FFULL) << 56) |
           ((val & 0x000000000000FF00ULL) << 40) |
           ((val & 0x0000000000FF0000ULL) << 24) |
           ((val & 0x00000000FF000000ULL) <<  8) |
           ((val & 0x000000FF00000000ULL) >>  8) |
           ((val & 0x0000FF0000000000ULL) >> 24) |
           ((val & 0x00FF000000000000ULL) >> 40) |
           ((val & 0xFF00000000000000ULL) >> 56);
}

uint32_t read_uint32(const char* data, int offset) {
    uint32_t val;
    memcpy(&val, data + offset, sizeof(uint32_t));
    return krnl_bswap32(val);
}

uint64_t read_uint64(const char* data, int offset) {
    uint64_t val;
    memcpy(&val, data + offset, sizeof(uint64_t));
    return krnl_bswap64(val);
}

// Memory allocation functions

void* krnl_malloc(size_t size) {
    #ifdef DEBUG_MEMORY
    return malloc(size);
    #else
    // Add your custom implementation here
    #endif
}

void* krnl_calloc(size_t num, size_t size) {
    #ifdef DEBUG_MEMORY
    return calloc(num, size);
    #else
    // Add your custom implementation here
    #endif
}

void* krnl_realloc(void* ptr, size_t size) {
    #ifdef DEBUG_MEMORY
    return realloc(ptr, size);
    #else
    // Add your custom implementation here
    #endif
}

void krnl_free(void* ptr) {
    #ifdef DEBUG_MEMORY
    free(ptr);
    #else
    // Add your custom implementation here
    #endif
}

// String functions